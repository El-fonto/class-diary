import os
import json
import uuid
import datetime
from datetime import date


class Student:
    def __init__(self, name: str) -> None:
        self.name = name
        self.id = str(uuid.uuid4())
        self.lesson_count = 1


class Session:
    def __init__(self, student: Student, session_date: date | None = None) -> None:
        self.student = student
        self.session_date = session_date or date.today()
        self.entries: list[tuple[datetime.datetime, str]] = []

    def add_entry(self, entry: str) -> None:
        timestamp = datetime.datetime.now()
        self.entries.append((timestamp, entry))

    def display_summary(self):
        if not self.entries:
            print("No entries this session")
            return

        print("\nClass Summary:")
        print(f"Date: {self.session_date}")
        print(f"Student: {self.student.name}")
        print(f"ID: {self.student.id}")

        i = 1
        for timestamp, entry in self.entries:
            formatted_timestamp = timestamp.strftime("%H:%M:%S")
            print(f"🕑️{formatted_timestamp} #[{i}]: {entry} at ")
            i += 1


class Diary:
    def __init__(self, path) -> None:
        self.path = path
        self.session_data = {}

    def get_or_create_student(self, name: str) -> Student:
        filename = f"{name}_profile.json"
        student_path = os.path.join(self.path, name)
        student_profile = os.path.join(student_path, filename)

        # there's a folder
        if os.path.exists(student_path):
            # check profile

            if os.path.isfile(student_profile):
                with open(student_profile, "r") as f:
                    loaded_profile = json.load(f)

                student = Student(name)
                student.id = loaded_profile.get("id", "Unknown")
                student.lesson_count = loaded_profile.get("lesson_count", 1)

                print(f"#{student.name} was found! ID:{student.id}")

                return student

        # no profile -> create one
        print(
            f"#No existing profile found at {student_path} Creating a new profile for: {name}"
        )

        os.makedirs(student_path, exist_ok=True)

        new_student = Student(name)
        self.session_data = {
            "name": new_student.name,
            "id": new_student.id,
            "lesson_count": new_student.lesson_count,
        }

        with open(student_profile, "w") as f:
            json.dump(self.session_data, f, indent=2, sort_keys=True)

        print(f"#Profile for [[{new_student.name}]] created -> {student_profile}")

        return new_student

    """
    def save_to_file(self, dest_path, session):
        if not os.path.exists(dest_path):
            os.makedirs(dest_path)

        self.session_data["student"] = 
        session_data = {
            "student": .name,
            "session_date": self.session_date.isoformat(),
            "entries": self.entries,
            "timestamps": self.timestamps,
        }

        filename = f"{self.session_date.isoformat()}_{self.name}.json"
        filepath = os.path.join(dest_path, filename)

        with open(filename, "w") as f:
            json.dump(session_data, f, indent=4)

        return filepath
"""
